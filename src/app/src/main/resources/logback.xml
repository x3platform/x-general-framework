<?xml version="1.0" encoding="UTF-8"?>
<!--
scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration>
  <property scope="context" name="APP_NAME" value="app"/>
  <property scope="context" name="LOG_PATH" value="log"/>
  <!-- 禁止输出启动信息 -->
  <statusListener class="ch.qos.logback.core.status.NopStatusListener"/>

  <!-- 控制台日志输出 配置-->
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
      <pattern>{%date{HH:mm:ss.SSS}} [%thread][%highlight(%-5level)] %magenta(%-40class{40})[%3line]: %msg%n</pattern>
    </encoder>
  </appender>
  <!-- 文件日志输出 -->
  <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!-- 配置日志输出的文件路径和名称 -->
    <file>${LOG_PATH}/${APP_NAME}.log</file>
    <!-- 配置日志是追加还是覆盖重写 -->
    <append>true</append>
    <!-- 配置日志是否立即刷新 -->
    <immediateFlush>true</immediateFlush>
    <!--添加 范围 过滤-->
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>INFO</level>
    </filter>
    <encoder>
      <!-- 配置日志输出格式 -->
      <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} [%thread][%-5level] %-36logger{36} %class[%line]: %msg%n</pattern>
    </encoder>
    <!--日志滚动策略，这里配置根据大小和日期自动滚动 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <!-- 首先按照每天滚动，根据日志放到不同文件夹中，最后根据大小进行滚动分割 -->
      <fileNamePattern>${LOG_PATH}/${APP_NAME}-%d{yyyy-MM-dd,UTC}.%i.log</fileNamePattern>
      <!-- 每个日志文件至少 4MB, 保存 30 天, 但是所有日志占用空间最大不能超过 5GB，超过后清理较旧的日志 -->
      <maxFileSize>2MB</maxFileSize>
      <maxHistory>30</maxHistory>
      <!-- 所有存档文件的总大小。超过总大小上限时，将异步删除最旧的归档。-->
      <totalSizeCap>5GB</totalSizeCap>
      <!-- 启动时候清理日志 -->
      <cleanHistoryOnStart>true</cleanHistoryOnStart>
    </rollingPolicy>
  </appender>
  <!-- 文件错误日志输出 -->
  <appender name="FILE_ERROR_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!-- 配置日志输出的文件路径和名称 -->
    <file>${LOG_PATH}/${APP_NAME}-error.log</file>
    <!-- 配置日志是追加还是覆盖重写 -->
    <append>true</append>
    <!-- 配置日志是否立即刷新 -->
    <immediateFlush>true</immediateFlush>
    <!--添加 范围 过滤-->
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>ERROR</level>
    </filter>
    <encoder>
      <!-- 配置日志输出格式 -->
      <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} [%thread][%-5level] %-36logger{36} %class[%line]: %msg%n</pattern>
    </encoder>
    <!--日志滚动策略，这里配置根据大小和日期自动滚动 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <!-- 首先按照每天滚动，根据日志放到不同文件夹中，最后根据大小进行滚动分割 -->
      <fileNamePattern>${LOG_PATH}/${APP_NAME}-error-%d{yyyy-MM-dd,UTC}.%i.log</fileNamePattern>
      <!-- 每个日志文件至少 4MB, 保存 30 天, 但是所有日志占用空间最大不能超过 5GB，超过后清理较旧的日志 -->
      <maxFileSize>2MB</maxFileSize>
      <maxHistory>60</maxHistory>
      <!-- 所有存档文件的总大小。超过总大小上限时，将异步删除最旧的归档。-->
      <totalSizeCap>5GB</totalSizeCap>
      <!-- 启动时候清理日志 -->
      <cleanHistoryOnStart>true</cleanHistoryOnStart>
    </rollingPolicy>
  </appender>
  <!-- 文件调式日志输出 -->
  <appender name="FILE_DEBUG_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!-- 配置日志输出的文件路径和名称 -->
    <file>${LOG_PATH}/${APP_NAME}-debug.log</file>
    <!-- 配置日志是追加还是覆盖重写 -->
    <append>true</append>
    <!-- 配置日志是否立即刷新 -->
    <immediateFlush>true</immediateFlush>
    <!--添加 范围 过滤-->
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>INFO</level>
    </filter>
    <encoder>
      <!-- 配置日志输出格式 -->
      <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} [%thread][%-5level] %-36logger{36} %class[%line]: %msg%n</pattern>
    </encoder>
    <!--日志滚动策略，这里配置根据大小和日期自动滚动 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <!-- 首先按照每天滚动，根据日志放到不同文件夹中，最后根据大小进行滚动分割 -->
      <fileNamePattern>${LOG_PATH}/${APP_NAME}-debug-%d{yyyy-MM-dd,UTC}.%i.log</fileNamePattern>
      <!-- 每个日志文件至少 2MB, 保存 1 天, 但是所有日志占用空间最大不能超过 2GB，超过后清理较旧的日志 -->
      <maxFileSize>2MB</maxFileSize>
      <maxHistory>1</maxHistory>
      <!-- 所有存档文件的总大小。超过总大小上限时，将异步删除最旧的归档。-->
      <totalSizeCap>2GB</totalSizeCap>
      <!-- 启动时候清理日志 -->
      <cleanHistoryOnStart>true</cleanHistoryOnStart>
    </rollingPolicy>
  </appender>
  <!--
  根节点日志记录器 配置
  -->
  <root level="DEBUG">
    <appender-ref ref="FILE"/>
    <appender-ref ref="FILE_ERROR_LOG"/>
    <appender-ref ref="FILE_DEBUG_LOG"/>
    <!-- 生产环境将请禁用 STDOUT -->
    <appender-ref ref="STDOUT"/>
  </root>

  <!--
  第三方 jar 包日志输出级别
  -->
  <logger name="org.springframework" level="WARN"/>
  <logger name="org.mybatis" level="DEBUG"/>
  <logger name="com.springboot" level="INFO"/>
  <logger name="com.quartz" level="ERROR"/>
  <logger name="com.apache.zookeeper" level="ERROR"/>
  <logger name="io.netty" level="ERROR"/>
  <!--
  自定义修改
  自主开发的 jar 包日志输出级别
  正式环境设置 WARN 级别 | 开发环境设置 DEBUG 级别
  -->
  <logger name="com.x3platform" level="DEBUG" additivity="true"/>
  <logger name="com.amiintellect" level="DEBUG" additivity="true"/>
</configuration>
