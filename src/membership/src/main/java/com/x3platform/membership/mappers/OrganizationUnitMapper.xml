<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.x3platform.membership.mappers.OrganizationUnitMapper">
  <resultMap id="findOne_Result" type="com.x3platform.membership.models.OrganizationUnitInfo">
    <result property="mId" column="id"/>
    <result property="mName" column="name"/>
    <result property="mModifiedDate" column="modified_date"/>
    <result property="mCreatedDate" column="created_date"/>
  </resultMap>
  <resultMap id="findAll_Result" type="com.x3platform.membership.models.OrganizationUnitInfo">
    <result property="mId" column="id"/>
    <result property="mName" column="name"/>
    <result property="mModifiedDate" column="modified_date"/>
    <result property="mCreatedDate" column="created_date"/>
  </resultMap>
  <resultMap id="findAllRelation_Result" type="com.x3platform.membership.models.AccountOrganizationUnitRelationInfo" >
    <result property="mAccountId" column="account_id" />
    <result property="mAccountGlobalName" column="account_global_name" />
    <result property="mOrganizationUnitId" column="organization_unit_id" />
    <result property="mOrganizationUnitGlobalName" column="organization_unit_global_name" />
    <result property="mIsDefault" column="is_default" />
    <result property="mBeginDate" column="begin_date" />
    <result property="mEndDate" column="end_date" />
  </resultMap>

  <insert id="insert" parameterType="com.x3platform.membership.models.OrganizationUnitInfo">
    INSERT INTO sys_organization_unit
    (
      name,
      expression,
      seed,
      modifiedDate,
      createdDate
    )
    VALUES
    (
      #{name},
      #{expression},
      #{seed},
      CURRENT_TIMESTAMP,
      CURRENT_TIMESTAMP
    )
  </insert>
  <update id="update" parameterType="com.x3platform.membership.models.OrganizationUnitInfo">
    UPDATE sys_organization_unit SET

    expression = #{expression},
    seed = #{seed},
    modifiedDate = CURRENT_TIMESTAMP

    WHERE Name = #{name}
  </update>
  <insert id="save" parameterType="com.x3platform.membership.models.OrganizationUnitInfo">
      IF EXISTS(SELECT 0 FROM sys_organization_unit WHERE Name = #name#)
      BEGIN
      UPDATE sys_organization_unit SET

      Expression = #Expression#,
      Seed = #Seed#,
      ModifiedDate = CURRENT_TIMESTAMP

      WHERE Name = #Name#
      END
      ELSE
      BEGIN
      INSERT INTO sys_organization_unit
      (
      Name,
      Expression,
      Seed,
      ModifiedDate,
      CreatedDate
      )
      VALUES
      (
      #Name#,
      #Expression#,
      #Seed#,
      CURRENT_TIMESTAMP,
      CURRENT_TIMESTAMP
      )
      END
  </insert>
  <delete id="delete">
    DELETE FROM sys_organization_unit WHERE Name = #{name}
  </delete>
  <select id="findOne" resultMap="findOne_Result">
    SELECT * FROM sys_organization_unit WHERE id = #{id}
  </select>
  <select id="findCorporationByOrganizationUnitId" resultMap="findOne_Result">
    SELECT * FROM sys_organization_unit WHERE id IN ( func_GetCorporationIdByOrganizationUnitId(#{id}) )
  </select>
  <select id="findAll" resultMap="findAll_Result">
    SELECT * FROM sys_organization_unit T
    <where>
      <if test="whereClause != null and whereClause !=''">
        ${whereClause}
      </if>
    </where>
    <if test="orderBy != null and orderBy !=''">
      ORDER BY ${orderBy}
    </if>
    <if test="length > 0">
      LIMIT 0, ${length}
    </if>
  </select>
  <select id="findAllByParentId" resultMap="findAll_Result">
    SELECT * FROM sys_organization_unit where id = #{parentId}
  </select>
  <!--
      <select id="FindAll#MySql" resultMap="findAll_Result" >
        SELECT * FROM sys_organization_unit T

        <dynamic prepend="WHERE">
          <isParameterPresent>
            <isNotEmpty prepend="AND" property="WhereClause" >
              $WhereClause$
            </isNotEmpty>
          </isParameterPresent>
        </dynamic>

        <dynamic prepend="ORDER BY">
          <isNotEmpty prepend="AND" property="OrderBy" >
            $OrderBy$
          </isNotEmpty>
        </dynamic>

        <dynamic prepend="LIMIT">
          <isNotEqual prepend="LIMIT" property="Length" compareValue="0">
            0, $Length$
          </isNotEqual>
        </dynamic>
      </select>
      <select id="FindAll#SqlServer" resultMap="findAll_Result" >
        SELECT

        <dynamic prepend="TOP">
          <isNotEqual prepend="TOP" property="Length" compareValue = "0">
            $Length$
          </isNotEqual>
        </dynamic>

        * FROM sys_organization_unit T

        <dynamic prepend="WHERE">
          <isParameterPresent>
            <isNotEmpty prepend="AND" property="WhereClause" >
              $WhereClause$
            </isNotEmpty>
          </isParameterPresent>
        </dynamic>

        <dynamic prepend="ORDER BY">
          <isParameterPresent>
            <isNotEmpty prepend="AND" property="OrderBy" >
              $OrderBy$
            </isNotEmpty>
          </isParameterPresent>
        </dynamic>
      </select>
      <select id="GetPaging#MySql"  resultMap="findAll_Result" >
        SELECT * FROM sys_organization_unit T

        <dynamic prepend="WHERE">
          <isParameterPresent>
            <isNotEmpty prepend="AND" property="WhereClause" >
              $WhereClause$
            </isNotEmpty>
          </isParameterPresent>
        </dynamic>

        <dynamic prepend="ORDER BY">
          <isNotEmpty prepend="AND" property="OrderBy" >
            $OrderBy$
          </isNotEmpty>
        </dynamic>

        LIMIT $StartIndex$, $PageSize$
      </select>

      <select id="GetPaging#Oracle" resultMap="findAll_Result" >
        SELECT T2.* FROM (
        SELECT ROWNUM RowIndex, T1.* FROM (
        SELECT * FROM sys_organization_unit T

        <where>
          <if test="WhereClause != null">
            $WhereClause$
          </if>
        </where>
        ORDER BY $OrderBy$

        ) T1 WHERE ROWNUM &lt;= ($StartIndex$ + $PageSize$)
        ) T2 WHERE T2.RowIndex &gt; $StartIndex$
      </select>
      <select id="GetPaging#SqlServer" resultMap="findAll_Result" >
        SELECT *

        FROM (SELECT *, ROW_NUMBER() OVER(ORDER BY $OrderBy$) AS RowIndex

        FROM sys_organization_unit T

        <where>
          <if test="WhereClause != null">
            $WhereClause$
          </if>
        </where>) TableIndex

        WHERE TableIndex.RowIndex BETWEEN $StartIndex$ + 1 AND $StartIndex$ + $PageSize$
      </select>
      <select id="GetRowCount" >
        SELECT COUNT(0) AS "RowCount" FROM sys_organization_unit T
        <where>
          <if test="WhereClause != null">
              $WhereClause$
          </if>
        </where>
      </select>
      -->
  <select id="isExist">
    SELECT COUNT(0) AS "Count" FROM sys_organization_unit WHERE $WhereClause$
  </select>
  <select id="isExistName" resultType="boolean">
    SELECT COUNT(0) AS "Count" FROM sys_organization_unit WHERE Name = #{name}
  </select>
  <select id="findAllRelation" resultMap="findAllRelation_Result" >
    SELECT
    AccountId,
    tb_Account.GlobalName AS AccountGlobalName,
    OrganizationUnitId,
    tb_OrganizationUnit.GlobalName AS OrganizationUnitGlobalName,
    IsDefault,
    BeginDate,
    EndDate
    FROM
    tb_Account_OrganizationUnit
    INNER JOIN tb_Account ON tb_Account_OrganizationUnit.AccountId = tb_Account.Id
    INNER JOIN tb_OrganizationUnit ON tb_Account_OrganizationUnit.OrganizationUnitId = tb_OrganizationUnit.Id
    WHERE
    ${WhereClause}
  </select>
</mapper>
