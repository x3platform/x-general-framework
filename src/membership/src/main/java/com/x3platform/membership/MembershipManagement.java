package com.x3platform.membership;

import com.x3platform.KernelContext;
import com.x3platform.SpringContext;

import com.x3platform.globalization.I18n;
import com.x3platform.membership.configuration.MembershipConfiguration;
import com.x3platform.membership.configuration.MembershipConfigurationView;
import com.x3platform.membership.services.*;
import com.x3platform.plugins.CustomPlugin;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class MembershipManagement extends CustomPlugin {
  @Override
  public String getName() {
    return "人员及权限管理";
  }

  private static volatile MembershipManagement sInstance = null;

  private static Object lockObject = new Object();

  /**
   * 实例
   */
  public static MembershipManagement getInstance() {
    if (sInstance == null) {
      synchronized (lockObject) {
        if (sInstance == null) {
          sInstance = new MembershipManagement();
        }
      }
    }

    return sInstance;
  }

  private IAccountService mAccountService = null;

  /**
   * 帐号服务提供者
   */
  public final IAccountService getAccountService() {
    return mAccountService;
  }

  private ISettingService mSettingService = null;

  /**
   * 配置参数服务提供者
   */
  public final ISettingService getSettingService() {
    return mSettingService;
  }

  private MembershipManagement() {
    restart();
  }

  /**
   * 重启次数计数器
   */
  private int restartCount = 0;

  /**
   * 重启插件
   *
   * @return 返回信息. =0代表重启成功, >0代表重启失败.
   */
  @Override
  public int restart() {
    try {
      this.reload();

      // 自增重启次数计数器
      this.restartCount++;
    } catch (RuntimeException ex) {
      // KernelContext.Log.Error(ex.getMessage(), ex);
      throw ex;
    }

    return 0;
  }

  private void reload() {
    if (this.restartCount > 0) {
      KernelContext.getLog().info(String.format(I18n.getStrings().text("application_is_reloading"), MembershipConfiguration.ApplicationName));

      // 重新加载配置信息
      MembershipConfigurationView.getInstance().reload();
    } else {
      KernelContext.getLog().info(String.format(I18n.getStrings().text("application_is_loading"), MembershipConfiguration.ApplicationName));
    }

    // 创建数据服务对象
    this.mAccountService = SpringContext.getBean("com.x3platform.membership.services.IAccountService", IAccountService.class);
    this.mSettingService = SpringContext.getBean("com.x3platform.membership.services.ISettingService", ISettingService.class);

    KernelContext.getLog().info(String.format(I18n.getStrings().text("application_is_successfully_loaded"), MembershipConfiguration.ApplicationName));
  }
}
